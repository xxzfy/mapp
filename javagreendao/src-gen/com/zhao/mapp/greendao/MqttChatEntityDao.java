package com.zhao.mapp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zhao.mapp.greendao.MqttChatEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MQTT_CHAT_ENTITY.
*/
public class MqttChatEntityDao extends AbstractDao<MqttChatEntity, Long> {

    public static final String TABLENAME = "MQTT_CHAT_ENTITY";

    /**
     * Properties of entity MqttChatEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Mode = new Property(1, int.class, "mode", false, "MODE");
        public final static Property Sessionid = new Property(2, String.class, "sessionid", false, "SESSIONID");
        public final static Property From = new Property(3, String.class, "from", false, "FROM");
        public final static Property To = new Property(4, String.class, "to", false, "TO");
        public final static Property V_code = new Property(5, String.class, "v_code", false, "V_CODE");
        public final static Property Timestamp = new Property(6, String.class, "timestamp", false, "TIMESTAMP");
        public final static Property Platform = new Property(7, String.class, "platform", false, "PLATFORM");
        public final static Property Message = new Property(8, String.class, "message", false, "MESSAGE");
        public final static Property Isread = new Property(9, boolean.class, "isread", false, "ISREAD");
        public final static Property Gossipid = new Property(10, Long.class, "gossipid", false, "GOSSIPID");
        public final static Property Gossip = new Property(11, String.class, "gossip", false, "GOSSIP");
        public final static Property Chattype = new Property(12, int.class, "chattype", false, "CHATTYPE");
        public final static Property Imagepath = new Property(13, String.class, "imagepath", false, "IMAGEPATH");
        public final static Property Base64image = new Property(14, String.class, "base64image", false, "BASE64IMAGE");
    };


    public MqttChatEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MqttChatEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MQTT_CHAT_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MODE' INTEGER NOT NULL ," + // 1: mode
                "'SESSIONID' TEXT NOT NULL ," + // 2: sessionid
                "'FROM' TEXT NOT NULL ," + // 3: from
                "'TO' TEXT NOT NULL ," + // 4: to
                "'V_CODE' TEXT," + // 5: v_code
                "'TIMESTAMP' TEXT NOT NULL ," + // 6: timestamp
                "'PLATFORM' TEXT," + // 7: platform
                "'MESSAGE' TEXT," + // 8: message
                "'ISREAD' INTEGER NOT NULL ," + // 9: isread
                "'GOSSIPID' INTEGER," + // 10: gossipid
                "'GOSSIP' TEXT," + // 11: gossip
                "'CHATTYPE' INTEGER NOT NULL ," + // 12: chattype
                "'IMAGEPATH' TEXT," + // 13: imagepath
                "'BASE64IMAGE' TEXT);"); // 14: base64image
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MQTT_CHAT_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MqttChatEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMode());
        stmt.bindString(3, entity.getSessionid());
        stmt.bindString(4, entity.getFrom());
        stmt.bindString(5, entity.getTo());
 
        String v_code = entity.getV_code();
        if (v_code != null) {
            stmt.bindString(6, v_code);
        }
        stmt.bindString(7, entity.getTimestamp());
 
        String platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindString(8, platform);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(9, message);
        }
        stmt.bindLong(10, entity.getIsread() ? 1l: 0l);
 
        Long gossipid = entity.getGossipid();
        if (gossipid != null) {
            stmt.bindLong(11, gossipid);
        }
 
        String gossip = entity.getGossip();
        if (gossip != null) {
            stmt.bindString(12, gossip);
        }
        stmt.bindLong(13, entity.getChattype());
 
        String imagepath = entity.getImagepath();
        if (imagepath != null) {
            stmt.bindString(14, imagepath);
        }
 
        String base64image = entity.getBase64image();
        if (base64image != null) {
            stmt.bindString(15, base64image);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MqttChatEntity readEntity(Cursor cursor, int offset) {
        MqttChatEntity entity = new MqttChatEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // mode
            cursor.getString(offset + 2), // sessionid
            cursor.getString(offset + 3), // from
            cursor.getString(offset + 4), // to
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // v_code
            cursor.getString(offset + 6), // timestamp
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // platform
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // message
            cursor.getShort(offset + 9) != 0, // isread
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // gossipid
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // gossip
            cursor.getInt(offset + 12), // chattype
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // imagepath
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // base64image
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MqttChatEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMode(cursor.getInt(offset + 1));
        entity.setSessionid(cursor.getString(offset + 2));
        entity.setFrom(cursor.getString(offset + 3));
        entity.setTo(cursor.getString(offset + 4));
        entity.setV_code(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTimestamp(cursor.getString(offset + 6));
        entity.setPlatform(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMessage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsread(cursor.getShort(offset + 9) != 0);
        entity.setGossipid(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setGossip(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setChattype(cursor.getInt(offset + 12));
        entity.setImagepath(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBase64image(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MqttChatEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MqttChatEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
