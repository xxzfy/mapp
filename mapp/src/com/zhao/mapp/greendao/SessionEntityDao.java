package com.zhao.mapp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zhao.mapp.greendao.SessionEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SESSION_ENTITY.
*/
public class SessionEntityDao extends AbstractDao<SessionEntity, Long> {

    public static final String TABLENAME = "SESSION_ENTITY";

    /**
     * Properties of entity SessionEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sessionid = new Property(1, String.class, "sessionid", false, "SESSIONID");
        public final static Property From = new Property(2, String.class, "from", false, "FROM");
        public final static Property To = new Property(3, String.class, "to", false, "TO");
        public final static Property Gossipid = new Property(4, long.class, "gossipid", false, "GOSSIPID");
        public final static Property Gossip = new Property(5, String.class, "gossip", false, "GOSSIP");
        public final static Property Sessiontype = new Property(6, int.class, "sessiontype", false, "SESSIONTYPE");
        public final static Property Asdasd = new Property(7, boolean.class, "asdasd", false, "ASDASD");
    };


    public SessionEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SessionEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SESSION_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'SESSIONID' TEXT NOT NULL UNIQUE ," + // 1: sessionid
                "'FROM' TEXT NOT NULL ," + // 2: from
                "'TO' TEXT NOT NULL ," + // 3: to
                "'GOSSIPID' INTEGER NOT NULL ," + // 4: gossipid
                "'GOSSIP' TEXT," + // 5: gossip
                "'SESSIONTYPE' INTEGER NOT NULL ," + // 6: sessiontype
                "'ASDASD' INTEGER NOT NULL );"); // 7: asdasd
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SESSION_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SessionEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getSessionid());
        stmt.bindString(3, entity.getFrom());
        stmt.bindString(4, entity.getTo());
        stmt.bindLong(5, entity.getGossipid());
 
        String gossip = entity.getGossip();
        if (gossip != null) {
            stmt.bindString(6, gossip);
        }
        stmt.bindLong(7, entity.getSessiontype());
        stmt.bindLong(8, entity.getAsdasd() ? 1l: 0l);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SessionEntity readEntity(Cursor cursor, int offset) {
        SessionEntity entity = new SessionEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // sessionid
            cursor.getString(offset + 2), // from
            cursor.getString(offset + 3), // to
            cursor.getLong(offset + 4), // gossipid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gossip
            cursor.getInt(offset + 6), // sessiontype
            cursor.getShort(offset + 7) != 0 // asdasd
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SessionEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSessionid(cursor.getString(offset + 1));
        entity.setFrom(cursor.getString(offset + 2));
        entity.setTo(cursor.getString(offset + 3));
        entity.setGossipid(cursor.getLong(offset + 4));
        entity.setGossip(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSessiontype(cursor.getInt(offset + 6));
        entity.setAsdasd(cursor.getShort(offset + 7) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SessionEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SessionEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
